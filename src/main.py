# from picamzero import Camera
import RPi.GPIO as GPIO
import time
# import curses
# from objects.wheel import Wheel

GPIO.setmode(GPIO.BOARD)  # Use BOARD numbering (not BCM)
# GPIO.setwarnings(False)
"""
  Never Gonna Give you Up
  Connect a piezo buzzer or speaker to pin 11 or select a new pin.
  More songs available at https://github.com/robsoncouto/arduino-songs                                            
                                              
                                              Robson Couto, 2019
""" 
# import pygame
# import time

piezo_pin = 32				# PWM pin connected to LED

GPIO.setup(piezo_pin, GPIO.OUT)

pi_pwm = GPIO.PWM(piezo_pin,440)		#create PWM instance with frequency
pi_pwm.start(0)				#start PWM of required Duty Cycle 


# notes of the moledy followed by the duration.
# a 4 means a quarter note, 8 an eighteenth , 16 sixteenth, so on
# !!negative numbers are used to represent dotted notes,
# so -4 means a dotted quarter note, that is, a quarter plus an eighteenth!!
DURATION = {
    2: 0.5,
    4: 0.25,
    8: 0.125,
    16: 0.0625
}

NOTES = {
'B0':  31,
'C1':  33,
'CS1': 35,
'D1':  37,
'DS1': 39,
'E1':  41,
'F1':  44,
'FS1': 46,
'G1':  49,
'GS1': 52,
'A1':  55,
'AS1': 58,
'B1':  62,
'C2':  65,
'CS2': 69,
'D2':  73,
'DS2': 78,
'E2':  82,
'F2':  87,
'FS2': 93,
'G2':  98,
'GS2': 104,
'A2':  110,
'AS2': 117,
'B2':  123,
'C3':  131,
'CS3': 139,
'D3':  147,
'DS3': 156,
'E3':  165,
'F3':  175,
'FS3': 185,
'G3':  196,
'GS3': 208,
'A3':  220,
'AS3': 233,
'B3':  247,
'C4':  262,
'CS4': 277,
'D4':  294,
'DS4': 311,
'E4':  330,
'F4':  349,
'FS4': 370,
'G4':  392,
'GS4': 415,
'A4':  440,
'AS4': 466,
'B4':  494,
'C5':  523,
'CS5': 554,
'D5':  587,
'DS5': 622,
'E5':  659,
'F5':  698,
'FS5': 740,
'G5':  784,
'GS5': 831,
'A5':  880,
'AS5': 932,
'B5':  988,
'C6':  1047,
'CS6': 1109,
'D6':  1175,
'DS6': 1245,
'E6':  1319,
'F6':  1397,
'FS6': 1480,
'G6':  1568,
'GS6': 1661,
'A6':  1760,
'AS6': 1865,
'B6':  1976,
'C7':  2093,
'CS7': 2217,
'D7':  2349,
'DS7': 2489,
'E7':  2637,
'F7':  2794,
'FS7': 2960,
'G7':  3136,
'GS7': 3322,
'A7':  3520,
'AS7': 3729,
'B7':  3951,
'C8':  4186,
'CS8': 4435,
'D8':  4699,
'DS8': 4978,
'REST':   0,
}

melody = [
    ('D5',-4), ('E5',-4), ('A4',4), # 1
('E5',-4), ('FS5',-4), ('A5',16), ('G5',16), ('FS5',8),
('D5',-4), ('E5',-4), ('A4',2),
('A4',16), ('A4',16), ('B4',16), ('D5',8), ('D5',16),
('D5',-4), ('E5',-4), ('A4',4), # repeat from 1
('E5',-4), ('FS5',-4), ('A5',16), ('G5',16), ('FS5',8),
('D5',-4), ('E5',-4), ('A4',2),
('A4',16), ('A4',16), ('B4',16), ('D5',8), ('D5',16),
('REST',4), ('B4',8), ('CS5',8), ('D5',8), ('D5',8), ('E5',8), ('CS5',-8),
('B4',16), ('A4',2), ('REST',4), 

('REST',8), ('B4',8), ('B4',8), ('CS5',8), ('D5',8), ('B4',4), ('A4',8), # 7
('A5',8), ('REST',8), ('A5',8), ('E5',-4), ('REST',4), 
('B4',8), ('B4',8), ('CS5',8), ('D5',8), ('B4',8), ('D5',8), ('E5',8), ('REST',8),
('REST',8), ('CS5',8), ('B4',8), ('A4',-4), ('REST',4),
('REST',8), ('B4',8), ('B4',8), ('CS5',8), ('D5',8), ('B4',8), ('A4',4),
('E5',8), ('E5',8), ('E5',8), ('FS5',8), ('E5',4), ('REST',4),
  
('D5',2), ('E5',8), ('FS5',8), ('D5',8), # 13
('E5',8), ('E5',8), ('E5',8), ('FS5',8), ('E5',4), ('A4',4),
('REST',2), ('B4',8), ('CS5',8), ('D5',8), ('B4',8),
('REST',8), ('E5',8), ('FS5',8), ('E5',-4), ('A4',16), ('B4',16), ('D5',16), ('B4',16),
('FS5',-8), ('FS5',-8), ('E5',-4), ('A4',16), ('B4',16), ('D5',16), ('B4',16),

('E5',-8), ('E5',-8), ('D5',-8), ('CS5',16), ('B4',-8), ('A4',16), ('B4',16), ('D5',16), ('B4',16), # 18
('D5',4), ('E5',8), ('CS5',-8), ('B4',16), ('A4',8), ('A4',8), ('A4',8), 
('E5',4), ('D5',2), ('A4',16), ('B4',16), ('D5',16), ('B4',16),
('FS5',-8), ('FS5',-8), ('E5',-4), ('A4',16), ('B4',16), ('D5',16), ('B4',16),
('A5',4), ('CS5',8), ('D5',-8), ('CS5',16), ('B4',8), ('A4',16), ('B4',16), ('D5',16), ('B4',16),

('D5',4), ('E5',8), ('CS5',-8), ('B4',16), ('A4',4), ('A4',8),  # 23
('E5',4), ('D5',2), ('REST',4),
('REST',8), ('B4',8), ('D5',8), ('B4',8), ('D5',8), ('E5',4), ('REST',8),
('REST',8), ('CS5',8), ('B4',8), ('A4',-4), ('REST',4),
('REST',8), ('B4',8), ('B4',8), ('CS5',8), ('D5',8), ('B4',8), ('A4',4),
('REST',8), ('A5',8), ('A5',8), ('E5',8), ('FS5',8), ('E5',8), ('D5',8),

('REST',8), ('A4',8), ('B4',8), ('CS5',8), ('D5',8), ('B4',8), # 29
('REST',8), ('CS5',8), ('B4',8), ('A4',-4), ('REST',4),
('B4',8), ('B4',8), ('CS5',8), ('D5',8), ('B4',8), ('A4',4), ('REST',8),
('REST',8), ('E5',8), ('E5',8), ('FS5',4), ('E5',-4), 
('D5',2), ('D5',8), ('E5',8), ('FS5',8), ('E5',4), 
('E5',8), ('E5',8), ('FS5',8), ('E5',8), ('A4',8), ('A4',4),

('REST',-4), ('A4',8), ('B4',8), ('CS5',8), ('D5',8), ('B4',8), # 35
('REST',8), ('E5',8), ('FS5',8), ('E5',-4), ('A4',16), ('B4',16), ('D5',16), ('B4',16),
('FS5',-8), ('FS5',-8), ('E5',-4), ('A4',16), ('B4',16), ('D5',16), ('B4',16),
('E5',-8), ('E5',-8), ('D5',-8), ('CS5',16), ('B4',8), ('A4',16), ('B4',16), ('D5',16), ('B4',16),
('D5',4), ('E5',8), ('CS5',-8), ('B4',16), ('A4',4), ('A4',8), 

  ('E5',4), ('D5',2), ('A4',16), ('B4',16), ('D5',16), ('B4',16), # 40
('FS5',-8), ('FS5',-8), ('E5',-4), ('A4',16), ('B4',16), ('D5',16), ('B4',16),
('A5',4), ('CS5',8), ('D5',-8), ('CS5',16), ('B4',8), ('A4',16), ('B4',16), ('D5',16), ('B4',16),
('D5',4), ('E5',8), ('CS5',-8), ('B4',16), ('A4',4), ('A4',8),  
('E5',4), ('D5',2), ('A4',16), ('B4',16), ('D5',16), ('B4',16),
  
('FS5',-8), ('FS5',-8), ('E5',-4), ('A4',16), ('B4',16), ('D5',16), ('B4',16), # 45
('A5',4), ('CS5',8), ('D5',-8), ('CS5',16), ('B4',8), ('A4',16), ('B4',16), ('D5',16), ('B4',16),
('D5',4), ('E5',8), ('CS5',-8), ('B4',16), ('A4',4), ('A4',8),  
('E5',4), ('D5',2), ('A4',16), ('B4',16), ('D5',16), ('B4',16),
('FS5',-8), ('FS5',-8), ('E5',-4), ('A4',16), ('B4',16), ('D5',16), ('B4',16), # 45

('A5',4), ('CS5',8), ('D5',-8), ('CS5',16), ('B4',8), ('A4',16), ('B4',16), ('D5',16), ('B4',16),
('D5',4), ('E5',8), ('CS5',-8), ('B4',16), ('A4',4), ('A4',8), 

('E5',4), ('D5',2), ('REST',4)
]
try:
    for note, duration in melody:
        if note == 'REST':
            print(note, duration)   
            adjusted_duration = DURATION[abs(duration)] * (1.5 if duration < 0 else 1)
            time.sleep(abs(adjusted_duration))
        else:
            freq = NOTES[note]
            print(freq)
            pi_pwm.ChangeFrequency(freq)
            pi_pwm.ChangeDutyCycle(50)
            adjusted_duration = DURATION[abs(duration)] * (1.5 if duration < 0 else 1)
            time.sleep(abs(adjusted_duration))

        time.sleep(0.01)

finally:
    GPIO.cleanup()
